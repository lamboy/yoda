worker_processes 1;
pid /tmp/nginx.pid;
daemon off;
user root;

env AWS_ACCESS_KEY_ID;
env AWS_SECRET_ACCESS_KEY;
env S3_BUCKET_NAME;

events {
    worker_connections 1024;
}

http {

    upstream storage {
        server storage-app:5003 max_fails=3 fail_timeout=30s;
    }

    server {

        listen 5002;

        client_max_body_size 128m;

        location = /files {
            auth_request /auth;
            set $storage backend_file;
            set $bu_checksum on;
            set $bu_sha1 on;
            set $file_storage_path /mnt/shared/files;
            set $backend_url /backend;
            set $package_path '/usr/local/nginx/modules/nginx-big-upload/?.lua';
            content_by_lua_file /usr/local/nginx/modules/nginx-big-upload/big-upload.lua;
        }

        # This location was inspired (copied in fact) from the following Github repository:
        # https://github.com/jamescmartinez/nginx-s3-upload
        # TODO: Figure out how to download stuff

        # location ~* ^/s3files/(.*)/(.*)/(.*) {

        location ~* ^/s3files/(.*) {

            if ($request_method != PUT) {
                return 404;
            }

            # set $entity $1;
            # set $property $2;
            set $filename $1;
            set_secure_random_alphanum $prefix 64;
            set_sha1 $prefixsha $prefix;
            set_by_lua $date "return ngx.cookie_time(ngx.time())";
            set_sha1 $datesha $date;
            set $upload_id $prefixsha$datesha;
            # set $key $entity/$property/$upload_id/original/$filename;
            set $key $filename;
            set_by_lua $bucket "return os.getenv('S3_BUCKET_NAME')";
            set $url http://$bucket.s3.amazonaws.com/$key;
            set_by_lua $aws_access_key "return os.getenv('AWS_ACCESS_KEY_ID')";
            set_by_lua $aws_secret_key "return os.getenv('AWS_SECRET_ACCESS_KEY')";
            set $acl public-read;
            set $canonicalized_amz_headers "x-amz-acl:$acl\nx-amz-date:$date";
            set $canonicalized_resource "/$bucket/$key";
            set $string_to_sign "$request_method\n$http_content_md5\n$http_content_type\n\n$canonicalized_amz_headers\n$canonicalized_resource";
            set_by_lua $aws_signature "return ngx.encode_base64(ngx.hmac_sha1(ngx.var.aws_secret_key, ngx.var.string_to_sign))";

            proxy_set_header Authorization "AWS $aws_access_key:$aws_signature";
            proxy_set_header x-amz-acl $acl;
            proxy_set_header x-amz-date $date;
            # proxy_set_header Expect "100-continue";
            proxy_hide_header x-amz-id-2;
            proxy_hide_header x-amz-request-id;
            add_header X-File-URL $url;

            resolver 8.8.8.8 valid=300s;
            resolver_timeout 10s;

            proxy_pass $url;
        }

        location / {
            proxy_pass http://storage;
        }

        location /downloads {
            auth_request /auth;
            alias /mnt/shared/files/;
        }

        location /auth {
            internal;
            rewrite /auth /files break;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_pass http://storage;
        }

        location /backend {
            internal;
            rewrite /backend /files break;
            proxy_pass http://storage;
        }
    }
}