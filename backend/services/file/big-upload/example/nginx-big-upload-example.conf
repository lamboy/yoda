error_log  /dev/stderr warn;
daemon off;
worker_processes 4;
pid /tmp/nginx-big-upload-example.pid;

events {
	worker_connections 10;
}

http {

 server {
   listen 8089;
   server_name localhost;
   access_log /dev/stdout combined;
   error_log /dev/stderr warn;

   root html;

   #we won't send chunks larger than 10MB
   client_max_body_size 10m;


   #backend managed with crc32 support
   location = /upload {
     lua_code_cache off; #development only
     set $storage backend_file;
     set $bu_checksum on;
     set $bu_sha1 on;

     set $file_storage_path /tmp;

     #here goes your backend path
     set $backend_url /bknd;
     set $package_path '../?.lua';
     content_by_lua_file ../big-upload.lua;
   }

   #this is used only to demonstrate download of an uploaded file, not safe for production
   location /file/ {
     rewrite ^/file/([0-9]+)/.+$ /tmp/$1 last;
   }

   #this is used only to demonstrate download of an uploaded file, not safe for production
   location /tmp {
     internal;
     root /;
   }

   location /bknd {
     internal;
     access_log off;
     #if your backend is under named location
     content_by_lua 'ngx.exec("@backend")';
   }

   # echo body as answer to the completed upload
   location @backend {
     content_by_lua '
        ngx.header["X-Test"]="testvalue"
        ngx.header["X-Checksum"]=ngx.req.get_headers()["X-Checksum"]
        ngx.status = 200
        ngx.print(ngx.req.get_body_data()) -- echo request body
     ';
   }

 }
}